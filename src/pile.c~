#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include "../include/pile.h"

int pilePleine(Pile *p){
  return ((p -> capa) == (p -> qlen));
}

int pileVide(Pile *p){
  return ((p -> capa) == 0);
}

void empiler(Pile *p, void* nvF, void *args){
  if(pilePleine(p)){
    perror("Pile Pleine");
    return;
  }
  puts("Dans empiler");
  Tache *new = malloc(sizeof(Tache));
    ERROR_MEMOIRE(new,"pileSched.c: empiler : malloc");
    ERROR_STRUCT(new, "pileSched.c: empiler : new");
    ERROR_STRUCT(args, "pileSched.c: empiler : args");
      new -> f = nvF;
      new -> closure = args;
      new -> svt = p->first;
      p -> first = new;
      (p -> capa) += 1;
      printf("Taille empiler %d : \n", (p -> capa));
}

Tache* depiler(Pile *pile){
  puts("Dans depiler");
  //ERROR_STRUCT(pile, "pileSched.c: depiler: pile vide");
  printf("Taille depiler  %d :\n ", pile -> capa);
  Tache *elementDepile = NULL;
  
  // if (pile ->capa > 0){
      elementDepile = pile->first;
      puts("Dans depiler if");
      pile->first = pile->first->svt;
	(pile->capa) -= 1;
	//}
    return elementDepile;
}


/*
static void sched_mutex_destroy(struct scheduler *sched){
   ERROR_STRUCT(sched, "pileSched.c: mutex_destroy : sched");
   pthread_mutex_destroy(&sched->attr);
    pthread_mutex_destroy(&sched->mutex);
}   
static void sched_cond_destroy(struct scheduler *sched){
  error = pthread_condattr_init(&sched->attrCond);
  ERROR_THREAD(error, "pileSched.c : mutex_destroy : pthread_condattr_init : attrCond");
  error = pthread_condattr_setpshared(&sched->attrCond, PTHREAD_PROCESS_SHARED);
  ERROR_THREAD(error, "pileSched.c : mutex_destroy : pthread_condattr_setpshared : attrCond");
  error = pthread_cond_init(&sched->cond, &sched->attrCond);
  ERROR_THREAD(error, "pileSched.c : mutex_destroy : pthread_cond_init : cond");
}
*/
